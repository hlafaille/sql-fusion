"""
This object converts a schema map into SQL INSERT, SELECT, UPDATE, and DELETE statements
"""
import os.path

from objects.SQLColumn import Column
from objects.SchemaAlias import SchemaAlias
from objects.SchemaMap import RootSchemaMap, SchemaMap


class SQLFactory:
    def __init__(self, schema_map: RootSchemaMap, project_name):
        # establish some baseline variables
        self.primary_key = ""
        self.columns = []
        self.project_name = ""

        # enter the iteration loop
        self.iterate_schema_map(schema_map)
        self.assemble_sql_files()

    # iterate over the schema map
    def iterate_schema_map(self, schema_map):
        print("---------------------")
        print("[.] beginning sql compilation")
        for obj in schema_map:
            if type(obj) == Column:
                print("[.] found column - {0}".format(obj.name))
                self.columns.append(obj.name)

            elif type(obj) == SchemaMap:
                print("[.] found schema map, entering tree - {0}".format(obj.group_name))
                self.iterate_schema_map(obj)

            elif type(obj) == SchemaAlias:
                print("[.] found schema alias - {0}".format(obj.database_name))
                self.columns.append(obj.database_name)

    # assembles the CRUD SQL commands
    def assemble_sql_files(self):
        print("[?] what is the table name for this project? (ex: sales_orders)")
        table_name = input("> ")

        # INSERT
        insert_base = "INSERT INTO {0} ".format(table_name)
        values = " VALUES ("

        # add the columns to insert_base and values
        for col in range(len(self.columns)):
            # if this is the last column
            if col == len(self.columns) - 1:
                insert_base += "{0}) ".format(self.columns[col])
                values += "%({0})s)".format(self.columns[col])
            else:
                insert_base += "{0}, ".format(self.columns[col])
                values += "%({0})s, ".format(self.columns[col])

        # store the final insert command
        insert_final = insert_base + values

        # SELECT
        select_base = "SELECT "

        # add the columns to select_base
        for col in range(len(self.columns)):
            # if this is the last column
            if col == len(self.columns) - 1:
                select_base += "{0} ".format(self.columns[col])
            else:
                select_base += "{0}, ".format(self.columns[col])

        select_final = select_base + "FROM {0}".format(table_name)

        # UPDATE
        update_base = "UPDATE {0} SET ".format(table_name)

        # add the columns to update_base
        for col in range(len(self.columns)):
            # if this is the last column
            if col == len(self.columns) - 1:
                update_base += "{0}=(%({0})s) ".format(self.columns[col])
            else:
                update_base += "{0}=(%({0})s), ".format(self.columns[col])

        update_final = update_base

        # output SQL to file
        with open(os.path.join("build", self.project_name, "CRUD.sql"), "w") as file:
            file.write("-- This file was automatically generated by sql-fusion, a tool that helps generate SQL code and Python dataclasses.;\n")
            file.write("-- -------------------------------------;\n")
            file.write("-- CREATE;\n")
            file.write(insert_final + "\n")
            file.write("-- READ;\n")
            file.write(select_final + "\n")
            file.write("-- UPDATE;\n")
            file.write(update_final)

        print("[*] sql compilation complete, returning to prompt")



